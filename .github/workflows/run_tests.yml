name: Tests
on:
  pull_request:
    branches: [ main ]
    types: [ opened, reopened, synchronize, closed ]

permissions:
  id-token: write
  contents: write
  issues: write
  pull-requests: write

env:
  PYTHON_VERSION: 3.8


concurrency:
  group: ${{ github.ref }}-tests
  cancel-in-progress: true

jobs:
  run-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup Python
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Upgrade environment
        run: |
          python3 -m pip install --upgrade pip setuptools wheel

      - name: Get pip cache dir
        id: pip-cache
        run: |
          echo "dir=$(pip cache dir)" >> $GITHUB_OUTPUT

      - name: pip cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ hashFiles('**/setup.py', '**/requirements.txt', '**pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        if: ${{ steps.cache-python.outputs.cache-hit != 'true' }}
        run: |
          pip -v install -e ".[tests]"

      - name: Test CLI installation
        run: |
          result=$(vc --version)
          IFS="=" read name value <<< $(sed -n '2p' VERSION)
          version_number=${value//[[:space:]]/}
          expected="versioned_collection: "$version_number
          if [[ "$result" != "$expected" ]]; then
            exit 1
          fi
          
      - name: Start MongoDB
        uses: supercharge/mongodb-github-action@1.8.0
        with:
          mongodb-version: 5.0
          mongodb-replica-set: test-rs

      - name: Run Tests
        run: scripts/run_tests.sh

      - name: Coverage comment
        id: coverage_comment
        if: github.event.pull_request.merged == false
        uses: py-cov-action/python-coverage-comment-action@v3
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COVERAGE_DATA_BRANCH: ci/coverage_badge
          MINIMUM_GREEN: 85

      - name: Store Pull Request comment to be posted
        uses: actions/upload-artifact@v3
        if: steps.coverage_comment.outputs.COMMENT_FILE_WRITTEN == 'true'
        with:
          name: python-coverage-comment-action
          path: python-coverage-comment-action.txt

  build-docs-test:
    runs-on: ubuntu-latest
    needs: run-tests
    steps:
      - uses: actions/checkout@v3
        with:
          ref: main

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Upgrade environ
        run: |
          python3 -m pip install --upgrade pip setuptools wheel

      - name: Get pip cache dir
        id: pip-cache
        run: |
          python -m pip install --upgrade pip wheel
          echo "dir=$(pip cache dir)" >> $GITHUB_OUTPUT

      - name: pip cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ hashFiles('**/setup.py', '**/requirements.txt', '**pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          pip install -r docs/requirements.txt

      - name: Build the docs
        run: bash scripts/build_docs.sh

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: run-tests
    if: ${{ (github.event_name == 'push') && (github.ref_type == 'branch') && (github.ref_name == 'main') }}
    steps:
      - uses: actions/checkout@v3
        with:
          ref: main

      - name: Setup Python
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Upgrade environment
        run: |
          python3 -m pip install --upgrade pip setuptools build

      - name: Get pip cache dir
        id: pip-cache
        run: |
          echo "dir=$(pip cache dir)" >> $GITHUB_OUTPUT

      - name: pip cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ hashFiles('**/setup.py', '**/requirements.txt', '**pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        if: ${{ steps.cache-python.outputs.cache-hit != 'true' }}
        run: |
          pip -v install -e .
          pip install twine

#      - uses: aws-actions/configure-aws-credentials@v2
#        with:
#          aws-region: eu-west-2
#          role-to-assume: ${{ secrets.AWS_ROLE_BUILD }}
#          role-session-name: build_versioned_collection
#
#      - name: Build and publish
#        run: |
#          aws codeartifact login --tool twine --domain humanising --repository research
#          python -m build --wheel
#          twine upload -r codeartifact dist/*

      - name: Authenticate with Cloudsmith
        uses: HumanisingAutonomy/ha-foundation-python/github_actions/configure_python_download_cloudsmith_credentials@v0.4.2
        with:
          username: sandbox-bot
          password: ${{secrets.CLOUDSMITH_SANDBOX_BOT_API_KEY}}
          organisation: humanising-autonomy
          repository_name: ha-sandbox

      - name: Configure python publish credentials
        uses: HumanisingAutonomy/ha-foundation-python/github_actions/configure_python_publish_cloudsmith_credentials@v0.2.2
        with:
          organisation: humanising-autonomy
          repository_name: ha-sandbox
          username: sandbox-bot
          password: ${{secrets.CLOUDSMITH_SANDBOX_BOT_API_KEY}}

      - name: Build (Twine)
        run: python -m build --wheel

      - name: Publish (Twine)
        env:
          TWINE_PASSWORD: ${{secrets.CLOUDSMITH_SANDBOX_BOT_API_KEY}}
        run: twine upload -r ha-sandbox dist/*
